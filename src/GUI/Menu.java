/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicReference;
import javax.swing.Icon;
import javax.swing.SwingUtilities;

/**
 *
 * @author TriHieu
 */
public class Menu extends javax.swing.JPanel {
    private static AtomicReference<Menu> currentOpenMenu = new AtomicReference<>();
    public ArrayList<Menu> getSubMenu() {
        return subMenu;
    }
    private ActionListener act;
    private boolean showing = false;
    private final ArrayList<Menu> subMenu = new ArrayList<>();

    /**
     * Creates new form MenuItem
     */
    public void hideAllSubmenus() {
    Menu currentMenu = currentOpenMenu.get();
    for (Menu submenu : subMenu) {
        // Ẩn các submenu nếu chúng không phải là submenu của menu hiện tại đang mở
        if (currentMenu == this && !submenu.equals(currentMenu)) {
            continue;
        }
        submenu.hideMenu();
        submenu.hideAllSubmenus();  // Đệ quy để ẩn tất cả submenu con
    }
}
    public Menu(Icon icon, String menuName, ActionListener act, Menu... subMenu) {
        initComponents();
        lblIcon.setIcon(icon);
        lblItem.setText(menuName);

        if (act != null) {
            this.act = act;
        }
        this.setSize(new Dimension(Integer.MAX_VALUE, 52));
        this.setMaximumSize(new Dimension(Integer.MAX_VALUE, 52));
        this.setMinimumSize(new Dimension(Integer.MAX_VALUE, 52));
        // Thêm khoảng cách ngang giữa các menu item

        for (int i = 0; i < subMenu.length; i++) {
            this.subMenu.add(subMenu[i]);
            subMenu[i].setVisible(false);
        }
    }

    public void setShowing(boolean showing) {
        this.showing = showing;
    }

    /**
     * @return the subMenu
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        lblIcon = new javax.swing.JLabel();
        lblItem = new javax.swing.JLabel();

        setBackground(new java.awt.Color(102, 102, 102));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jScrollPane2.setBackground(new java.awt.Color(255, 204, 102));
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        lblIcon.setBackground(new java.awt.Color(51, 51, 51));
        lblIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblItem.setBackground(new java.awt.Color(0, 0, 0));
        lblItem.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        lblItem.setForeground(new java.awt.Color(255, 255, 255));
        lblItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblItemMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(lblItem, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblItem, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(lblIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lblItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblItemMousePressed
        // Ẩn tất cả submenu trước khi hiển thị menu mới
        hideAllSubmenus();

        if (showing) {
            hideMenu();
        } else {
            showMenu();
        }

        if (act != null) {
            act.actionPerformed(null);
        }
    }//GEN-LAST:event_lblItemMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblItem;
    // End of variables declaration//GEN-END:variables

    private void showMenu() {
    SwingUtilities.invokeLater(() -> {
        currentOpenMenu.set(this); // Sử dụng set để đặt giá trị mới cho AtomicReference
        for (int i = 0; i < subMenu.size(); i++) {
            sleep();
            subMenu.get(i).setVisible(true);
            subMenu.get(i).setBackground(new Color(153, 153, 153));
        }
        showing = true;
        getParent().repaint();
        getParent().revalidate();
    });
}

private void hideMenu() {
    SwingUtilities.invokeLater(() -> {
        currentOpenMenu.set(null); // Đặt lại giá trị khi menu được đóng
        for (int i = subMenu.size() - 1; i >= 0; i--) {
            sleep();
            subMenu.get(i).setVisible(false);
            subMenu.get(i).hideMenu();
        }
        getParent().repaint();
        getParent().revalidate();
        showing = false;
    });
}
private void sleep() {
    try {
        Thread.sleep(20);
    } catch (InterruptedException e) {
        // Xử lý nếu có lỗi khi tạm dừng luồng
        e.printStackTrace();
    }
}
 

}
